import logging
import random
import os
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ChatAction
from openai import OpenAI

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π –∏–∑ .env
load_dotenv()
openai_api_key = os.getenv("OPENAI_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=openai_api_key)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

TOPICS = {
    "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è": ["–ü–æ—á–µ–º—É –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è ‚Äî —ç—Ç–æ –Ω–µ –ª–µ–Ω—å", "–ö–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç–º–æ—Ü–∏—è–º–∏ –∑–∞ 15 —Å–µ–∫—É–Ω–¥"],
    "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥": ["–ü–æ—á–µ–º—É 99% –ª—é–¥–µ–π –ø–æ–∫—É–ø–∞—é—Ç –∏–∑-–∑–∞ —ç–º–æ—Ü–∏–π", "–ß—Ç–æ –Ω—É–∂–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å, —á—Ç–æ–±—ã —Ç–µ–±—è –∑–∞–ø–æ–º–Ω–∏–ª–∏"],
    "–ë–∏–∑–Ω–µ—Å": ["–ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –±–µ–∑ –¥–µ–Ω–µ–≥", "–ì–ª–∞–≤–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π"]
}

HOOKS = [
    "—á—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ª—é–¥–µ–π –Ω–µ –∑–∞–º–µ—á–∞—é—Ç",
    "—á—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å",
    "—á—Ç–æ —Å–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–±—è —É–∂–µ –º–Ω–æ–≥–æ –ª–µ—Ç"
]

CORES = [
    "—Å—Ç—Ä–∞—Ö –æ—à–∏–±–∫–∏ —Å–∏–ª—å–Ω–µ–µ –∂–µ–ª–∞–Ω–∏—è –≤—ã–∏–≥—Ä–∞—Ç—å",
    "–ø—Ä–æ–¥–∞–∂–∏ ‚Äî —ç—Ç–æ —ç–º–æ—Ü–∏–∏, –Ω–µ –ª–æ–≥–∏–∫–∞",
    "–Ω–∞—à –º–æ–∑–≥ —Ü–µ–ø–ª—è–µ—Ç—Å—è –∑–∞ –∑–Ω–∞–∫–æ–º–æ–µ, –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ –º–µ—à–∞–µ—Ç —Ä–æ—Å—Ç—É"
]

ADVICE = [
    "—Ä–∞–∑–±–µ–π –∑–∞–¥–∞—á—É –Ω–∞ –º–∏–∫—Ä–æ–¥–µ–π—Å—Ç–≤–∏—è",
    "–∑–∞–º–µ–Ω–∏ —Ñ–æ–∫—É—Å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å",
    "–∑–∞–ø–∏—à–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã –∏ –∑–∞–º–µ–Ω–∏ –∏—Ö –Ω–∞ —Ä–µ—Å—É—Ä—Å–Ω—ã–µ"
]

def generate_script(selected_topic=None):
    try:
        topic = selected_topic if selected_topic else random.choice(list(TOPICS.keys()))
        title = random.choice(TOPICS[topic])
        hook = random.choice(HOOKS)
        core = random.choice(CORES)
        advice = random.choice(ADVICE)

        prompt = f"""
–¢—ã ‚Äî —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç –¥–ª—è Instagram Reels. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π (60‚Äì90 —Å–µ–∫) —Ä–µ—á–µ–≤–æ–π —Ç–µ–∫—Å—Ç –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –∂–∏–≤—ã–º —è–∑—ã–∫–æ–º.
–¢–µ–º–∞: {title}
–°–º—ã—Å–ª: {core}
–•—É–∫: {hook}
–°–æ–≤–µ—Ç: {advice}

–§–æ—Ä–º–∞—Ç:
- –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ (–∑–∞—Ö–≤–∞—Ç –≤–Ω–∏–º–∞–Ω–∏—è)
- –ì–ª–∞–≤–Ω–∞—è –∏–¥–µ—è
- –ü—Ä–∏–º–µ—Ä
- –í—ã–≤–æ–¥ —Å –ª—ë–≥–∫–∏–º –ø—Ä–∏–∑—ã–≤–æ–º

–Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π, —Ç–æ–Ω ‚Äî –ª–∏—á–Ω—ã–π, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π.
"""

        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ OpenAI –ø–æ —Ç–µ–º–µ: {title}")
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç, –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥. –ü–∏—à–∏ —Ü–µ–ø–∫–æ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.85,
            max_tokens=400
        )

        text = response.choices[0].message.content
        timestamp = datetime.now().strftime("%d.%m.%Y %H:%M")
        logging.info("–ü–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç OpenAI")
        return f"üß† *AI-–°—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è Reels*\nüìå *{title}*\nüïí {timestamp}\n\n{text}"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info(f"User {update.effective_user.id} –≤—ã–∑–≤–∞–ª /start")
    keyboard = [[InlineKeyboardButton(topic, callback_data=topic)] for topic in TOPICS.keys()]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ç–µ–º—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π:", reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    topic = query.data
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–µ–º—É: {topic}")
    await query.edit_message_text(text=f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ —Ç–µ–º–µ: {topic}...")
    script = generate_script(topic)
    await query.message.reply_markdown(script)

async def script(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info(f"User {update.effective_user.id} –≤—ã–∑–≤–∞–ª /script")
    await update.message.chat.send_action(action=ChatAction.TYPING)
    text = generate_script()
    await update.message.reply_markdown(text)

if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("script", script))
    app.add_handler(CallbackQueryHandler(button))
    logging.info("Bot started!")
    app.run_polling()

